[[plugins]]
repo = 'thinca/vim-quickrun'
hook_source = '''
  source ~/dotfiles/nvim/plugins/quickrun.rc.vim
'''

[[plugins]]
repo = 'dense-analysis/ale'
on_ft = ['python', 'cpp', 'c', 'vim']
hook_add = '''
  let g:ale_linters = {
        \'cpp': ['clangd'],
        \'python': ['pyls', 'flake8', 'mypy'],
        \'vim': ['vint'],
        \'c': ['gcc']
        \}
  let g:ale_fixers = {
        \'cpp':['clang-format'],
        \'python':['autopep8', 'isort']
        \}
  let g:ale_hover_cursor=0
'''

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
on_ft = ['python', 'cpp', 'c']
hook_post_update = '''
  if has('win32') || has('win64')
      call system(
      \ 'powershell -executionpolicy bypass -File install.ps1')
  else
      call system('bash install.sh')
  endif
  let g:LanguageClient_preferredMarkupKind: ['plaintext']
'''
hook_source = '''
	source ~/dotfiles/nvim/plugins/languageclient.rc.vim
'''

[[plugins]]
repo = 'itchyny/calendar.vim'
hook_add = '''
  if filereadable(expand('~/.cache/calendar.vim/credentials.vim', ':h:p'))
    let g:calendar_google_calendar = 1
    let g:calendar_google_task = 1
    source ~/.cache/calendar.vim/credentials.vim
  endif
'''

[[plugins]]
repo = 'simplenote-vim/simplenote.vim'
on_event = 'CmdlineEnter'

[[plugins]]
repo = "puremourning/vimspector"
if = 'has("unix")'
on_ft = ["python", "cpp"]
build = "./install_gadget.py --enable-python --enable-c"
hook_add = '''
  source ~/dotfiles/nvim/plugins/vimspector.rc.vim
'''

[[plugins]]
repo = 'octol/vim-cpp-enhanced-highlight'

[[plugins]]
repo = 'Shougo/denite.nvim'
on_event = 'CmdlineEnter'
hook_source = '''
  source ~/dotfiles/nvim/plugins/denite.rc.vim
'''
hook_add = '''
  nnoremap <Space>d :Denite 
  nnoremap <silent> <Space>g :Denite grep<CR>
  nnoremap <silent><Space>b :Denite buffer<CR>
  nnoremap <silent><Space>a :Denite file/rec<CR>
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
on_event = 'CursorHold'
depends = ['defx-icons']
hook_source = '''
  call defx#custom#column('mark', {
        \ 'readonly_icon': '✗',
        \ 'selected_icon': '✓',
        \ })
  call defx#custom#column('icon', {
        \ 'directory_icon': '▸',
        \ 'opened_icon': '▾',
        \ 'root_icon': ' ',
        \ })
  call defx#custom#option('_', {
        \ 'winwidth': 30,
        \ 'split': 'vertical',
        \ 'direction': 'topleft',
        \ 'resume': 1,
        \ 'listed': 1,
        \ 'columns': 'mark:indent:icons:filename:type:time:size',
        \ 'vertical_preview': 1,
        \ 'floating_preview': 1,
        \ 'preview_width': 80,
        \ 'preview_height': 30,
        \ })
  source ~/dotfiles/nvim/plugins/defx.rc.vim
'''
hook_add = '''
  nnoremap <silent><C-f> :<C-u>Defx -buffer-name=`'defx' . t:defx_index`<CR>
  nmap <silent> <Space>t :tabe<CR><C-f>
  nmap <silent> <Space>f <C-f>:call defx#call_action('cd', [expand('~/dotfiles/nvim')])<CR>
  nmap <silent> <Space>w <C-f>:call defx#call_action('cd', [expand('~/work')])<CR>
  nmap <silent> <Space>p <C-f>:call defx#call_action('cd', [expand('~/.cache/dein/repos/github.com')])<CR>
'''

[[plugins]]
repo = 'kristijanhusak/defx-icons'

[[plugins]]
repo = 'yonchu/accelerated-smooth-scroll'
on_map = {n = '<Plug>(ac-smooth-scroll-'}
hook_add = '''
  let g:ac_smooth_scroll_no_default_key_mappings = 1
  let g:ac_smooth_scroll_du_sleep_time_msec=5
  let g:ac_smooth_scroll_min_limit_msec = 80
  nmap <silent> <C-d> <Plug>(ac-smooth-scroll-c-d)
  nmap <silent> <C-u> <Plug>(ac-smooth-scroll-c-u)
'''

[[plugins]]
repo = 'rhysd/clever-f.vim'
on_map = '<Plug>'
hook_add = '''
  let g:clever_f_not_overwrites_standard_mappings = 1
  let g:clever_f_mark_direct = 1
  let g:clever_f_smart_case = 1
  nmap f <Plug>(clever-f-f)
  xmap f <Plug>(clever-f-f)
  omap f <Plug>(clever-f-f)
  nmap F <Plug>(clever-f-F)
  xmap F <Plug>(clever-f-F)
  omap F <Plug>(clever-f-F)
  nmap t <Plug>(clever-f-t)
  xmap t <Plug>(clever-f-t)
  omap t <Plug>(clever-f-t)
  nmap T <Plug>(clever-f-T)
  xmap T <Plug>(clever-f-T)
  omap T <Plug>(clever-f-T)
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
on_map = '<plug>(easymotion-'
hook_add = '''
  let g:EasyMotion_do_mapping = 0
  let g:EasyMotion_smartcase = 1
  map <Space>j <Plug>(easymotion-j)
  map <Space>k <Plug>(easymotion-k)
  nmap <Space>j <Plug>(easymotion-overwin-line)
  nmap <Space><Space> <Plug>(easymotion-overwin-f2)
  xmap <Space><Space> <Plug>(easymotion-s2)
  omap <Space><Space> <Plug>(easymotion-s2)
'''

[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = 'vim-operator-user'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent>sa <Plug>(operator-surround-append)a
  nmap <silent>sd <Plug>(operator-surround-delete)a
  nmap <silent>sr <Plug>(operator-surround-replace)a
  nmap <silent>sc <Plug>(operator-surround-replace)a
'''

[[plugins]]
repo = 'SirVer/ultisnips'
depends = 'vim-snippets'
on_source = 'denite.nvim'
hook_add = '''
  let g:UltiSnipsExpandTrigger='<C-l>'
  let g:UltiSnipsJumpForwardTrigger='<C-j>'
  let g:UltiSnipsJumpBackwardTrigger='<C-k>'
'''
on_event = 'InsertCharPre'

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'previm/previm'
on_cmd = 'PrevimOpen'
depends = 'open-browser.vim'

[[plugins]]
repo = 'tyru/eskk.vim'
on_map = {ic = '<Plug>'}
hook_add = '''
  imap <C-j>     <Plug>(eskk:toggle)
  cmap <C-j>     <Plug>(eskk:toggle)
'''
hook_source = '''
  let g:eskk#enable_completion=1
  let g:eskk#directory = expand('~/.cache/eskk')
  let g:eskk#start_completion_length=2
  let g:eskk#tab_select_completion=1
  let g:eskk#keep_state = 1
  let g:eskk#dictionary = {
        \   'path': expand('~/.cache/skk-jisyo'),
        \   'sorted': 0,
        \   'encoding': 'utf-8',
        \}
  if has('win32') || has('win64')
    let g:eskk#large_dictionary = {
    \	'path': expand('~/AppData/Local/skk/SKK-JISYO.L'),
    \	'sorted': 1,
    \	'encoding': 'euc-jp',
    \}
  endif
'''

[[plugins]]
repo = 'tyru/caw.vim'
on_map = {nx = '<Plug>'}
hook_add = '''
  nmap gc <Plug>(caw:prefix)
  xmap gc <Plug>(caw:prefix)
  nmap gcc <Plug>(caw:hatpos:toggle)
  xmap gcc <Plug>(caw:hatpos:toggle)
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_event = 'InsertEnter'
hook_source = '''
  source ~/dotfiles/nvim/plugins/deoplete.rc.vim
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'deoplete-plugins/deoplete-dictionary'
on_source = 'deoplete.nvim'
hook_source = '''
  " If dictionary is already sorted, no need to sort it again.
  call deoplete#custom#source(
  \ 'dictionary', 'sorters', [])
  " Do not complete too short words
  call deoplete#custom#source(
  \ 'dictionary', 'min_pattern_length', 4)
'''

[[plugins]]
repo = 'Shougo/neco-vim'
on_source = 'context_filetype.vim'

[[plugins]]
repo = 'ncm2/float-preview.nvim'
on_source = 'deoplete.nvim'
hook_source = '''
  let g:float_preview#docked = 0
  let g:float_preview#max_width = 60
  let g:float_preview#max_height = 20
'''

[[plugins]]
repo = 'Shougo/echodoc.vim'
on_event = 'CompleteDone'
hook_add = '''
	let g:echodoc#type = 'floating'
  autocmd MyAutoCmd CmdWinEnter [:>] let g:echodoc#type = 'virtual'
  autocmd MyAutoCmd CmdWinLeave * let g:echodoc#type = 'floating'
'''
hook_source = '''
  call echodoc#enable()
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
on_event = 'CmdlineEnter'

# [[plugins]]
# repo = 'Shougo/neosnippet.vim'
# depends = ['neosnippet-snippets']
# hook_add = '''
# 	source ~/dotfiles/nvim/plugins/neosnippet.vim
# '''

# [[plugins]]
# repo = 'jackguo380/vim-lsp-cxx-highlight'
# on_ft = ["cpp"]
